
contract Coin {

    @state
    public PubKeyHash minter;
    @state
    public HashedMap<PubKeyHash, int> balances;

    public function mint(PubKeyHash receiver, int amount, Sig sig, PubKey pubKey, SigHashPreimage preimage, int oldbalance, int keyIndex) {
        require(hash160(pubKey) == this.minter);
        require(checkSig(sig, pubKey));

        require(this.balances.canGet(receiver, oldbalance, keyIndex));
        require(this.balances.set(receiver, oldbalance + amount, keyIndex));
        require(Tx.checkPreimage(preimage));
        bytes outputScript = this.getStateScript();
        bytes output = Utils.buildOutput(outputScript, SigHash.value(preimage));
        require(hash256(output) == SigHash.hashOutputs(preimage));
    }

    public function send(PubKeyHash receiver, int amount, Sig sig, PubKey pubKey, SigHashPreimage preimage, int senderOldbalance, int senderkeyIndex,
        int receiverOldbalance, int receiverkeyIndex) {
        PubKeyHash sender = hash160(pubKey);
        require(checkSig(sig, pubKey));

        require(this.balances.canGet(sender, senderOldbalance, senderkeyIndex));
        require(this.balances.canGet(receiver, receiverOldbalance, receiverkeyIndex));
        if (senderOldbalance < amount) exit(false);
        require(this.balances.set(sender, senderOldbalance - amount, senderkeyIndex));
        require(this.balances.set(receiver, receiverOldbalance - amount, receiverkeyIndex));
        require(Tx.checkPreimage(preimage));
        bytes outputScript = this.getStateScript();
        bytes output = Utils.buildOutput(outputScript, SigHash.value(preimage));
        require(hash256(output) == SigHash.hashOutputs(preimage));
    }
}
