library SafeMath {
  static function add(int x, int y) : int {
    int z = x + y;
    require(z >= x);
    return z;
  }
}

library Math {
  static const int MAX_UINT = 2 * 256 - 1;

  static function sqrt(int y) : int {
    int z = 0;
    if (y > 3) {
      z = y;
      int x = y / 2 + 1;
    }
    else if (y != 0) {
      z = 1;
    }
    return z;
  }
}

library Array {
  static function remove(int[9] arr, int index) : bool {
    return true;
  }
}

contract TestArray {
  @state
  public int[9] arr;

  public function testAdd(int x, int y, int retVal, SigHashPreimage txPreimage) {
    require(SafeMath.add(x, y) == retVal);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function testSquareRoot(int x, int retVal, SigHashPreimage txPreimage) {
    require(Math.sqrt(x) == retVal);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function testArrayRemove(SigHashPreimage txPreimage) {
    Array.remove(this.arr, 1);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}