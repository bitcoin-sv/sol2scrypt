struct ST {
  bytes text;
  bool completed;
  int[3] cl;
}

struct STW {
  ST[1] st;
  bytes text;
}

struct Todo {
  bytes text;
  bool completed;
}

struct TodoW {
  bytes text;
  bool completed;
  STW stw;
}

contract Todos {
  @state
  Todo[3] todos;

  @state
  STW stw;

  @state
  TodoW tw;

  @state
  public HashedMap<PubKeyHash, Todo> mapTodos;

  function create(bytes _text) : Todo {
    this.todos[0] = {_text, false};
    this.todos[0] = {_text, false};
    bool completed = this.todos[0].completed;
    Todo t1 = this.todos[0];
    t1.completed = false;
    this.todos[0].completed = false;
    Todo todo = {"", false};
    todo.text = _text;
    return {"", false};
  }

  public function update(bytes _text, PubKeyHash owner, Todo mapTodos_owner, int i0, SigHashPreimage txPreimage) {
    require((!this.mapTodos.has(owner, i0) && mapTodos_owner == {"", false}) || this.mapTodos.canGet(owner, mapTodos_owner, i0));
    mapTodos_owner = {_text, true};
    require(this.mapTodos.set(owner, mapTodos_owner, i0));
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function testReturnStructArray(bytes _text) : Todo[3] {
    Todo[3] ret = [{"", false}, {"", false}, {"", false}];
    bool returned = false;
    if (true) {
      {
        ret = this.todos;
        returned = true;
      }
    }
    return returned ? ret : this.todos;
  }

  function testReturnNestStruct(bytes _text) : TodoW {
    TodoW ret = {"", false, {[{"", false, [0, 0, 0]}], ""}};
    bool returned = false;
    if (true) {
      {
        ret = this.tw;
        returned = true;
      }
    }
    return returned ? ret : this.tw;
  }

  function testStructAsParam(TodoW tw) : bool {
    TodoW a = tw;
    return true;
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}