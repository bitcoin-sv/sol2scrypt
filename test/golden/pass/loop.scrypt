contract LoopTest {
  @state
  int x;

  constructor() {
    int i = 0;
    loop (__LoopCount__0) {
      if (i < 2) {
        this.x += i;
        i++;
      }
    }
  }

  public function f1(SigHashPreimage txPreimage) {
    int i = 0;
    loop (__LoopCount__0) {
      if (i < 10) {
        int j = 1;
        loop (__LoopCount__1) {
          if (j < i) {
            if (i == 4) {
              this.x += i * j;
            }
            j += 1;
          }
        }
        i++;
      }
    }
    require(this.propagateState(txPreimage));
  }

  public function f2(SigHashPreimage txPreimage) {
    int k = 0;
    int i = 0;
    loop (__LoopCount__0) {
      if (i < 10) {
        int j = 0;
        {
          int k = 1;
          if (k < 0) {
          }
          else {
            k += 3;
          }
          this.x += k * 2;
        }
        bool loopBreakFlag1 = false;
        loop (__LoopCount__1) {
          if (!loopBreakFlag1 && i > 4) {
            int k = 1;
            if (k < 0)
              loopBreakFlag1 = true;
            else {
              k += 3;
            }
            this.x += k * 2;
          }
        }
        i++;
      }
    }
    require(this.propagateState(txPreimage));
  }

  public function f3(SigHashPreimage txPreimage) {
    int i = 0;
    int j = 0;
    i = j;
    loop (__LoopCount__0) {
      if (i < 10) {
        bool loopBreakFlag1 = false;
        loop (__LoopCount__1) {
          if (!loopBreakFlag1 && i > 2) {
            if (j > 5) {
              this.x++;
              loopBreakFlag1 = true;
            }
            j += 1;
            this.x += j;
          }
        }
        i++;
      }
    }
    require(this.propagateState(txPreimage));
  }

  function f4() : int {
    int ret = 0;
    bool returned = false;
    int r = 0;
    int i = 0;
    loop (__LoopCount__0) {
      if (!returned && i < 10) {
        bool loopContinueFlag0 = false;
        {
          r += i;
          if (r > 10) {
            {
              ret = r * 10;
              returned = true;
            }
          }
        }
        loop (__LoopCount__1) {
          if (!returned && i < 5) {
            r += i;
            if (r > 10) {
              {
                ret = r * 10;
                returned = true;
              }
            }
          }
        }
        if (!returned) {
          if (i > 6) {
            loopContinueFlag0 = true;
          }
          if (!loopContinueFlag0) {
            r += i;
          }
        }
        i++;
      }
    }
    return returned ? ret : r;
  }

  function f5() : int {
    int r = 0;
    bool loopBreakFlag0 = false;
    int i = 0;
    loop (__LoopCount__0) {
      if (!loopBreakFlag0 && i < 10) {
        bool loopContinueFlag0 = false;
        loop (__LoopCount__1) {
          if (true) {
            i += 1;
            r++;
          }
        }
        if (i == 3) {
          r++;
          loopContinueFlag0 = true;
        }
        if (!loopContinueFlag0) {
          if (i == 5) {
            loopBreakFlag0 = true;
          }
          r++;
        }
        i++;
      }
    }
    return r;
  }

  function f6() : int {
    int ret = 0;
    bool returned = false;
    int r = 0;
    int i = 0;
    loop (__LoopCount__0) {
      if (!returned && i < 10) {
        bool loopContinueFlag0 = false;
        if (i == 3) {
          r++;
          if (r > 10) {
            {
              loopContinueFlag0 = true;
            }
          }
          if (!loopContinueFlag0) {
            r++;
          }
        }
        else {
          {
            ret = r;
            returned = true;
          }
        }
        if (!loopContinueFlag0) {
          if (!returned) {
            r++;
          }
        }
        i++;
      }
    }
    return returned ? ret : r;
  }

  function f7() : int {
    int r = 0;
    int i = 0;
    loop (__LoopCount__0) {
      if (i < 10) {
        bool loopContinueFlag0 = false;
        r++;
        if (r > 3) {
          loopContinueFlag0 = true;
        }
        if (!loopContinueFlag0) {
          bool loopBreakFlag1 = false;
          int i = 0;
          loop (__LoopCount__1) {
            if (!loopBreakFlag1 && i < 10) {
              bool loopContinueFlag1 = false;
              r++;
              if (r > 3) {
                loopContinueFlag1 = true;
              }
              else {
                if (r > 10) {
                  {
                    loopBreakFlag1 = true;
                  }
                }
              }
              if (!loopContinueFlag1) {
                r++;
              }
              i++;
            }
          }
          r++;
        }
        i++;
      }
    }
    return r;
  }

  function propagateState(SigHashPreimage txPreimage) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, SigHash.value(txPreimage));
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}