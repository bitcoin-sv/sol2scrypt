struct MapKeyST0 {
  PubKeyHash key0;
  PubKeyHash key1;
}

struct MapKeyST1 {
  PubKeyHash key0;
  int key1;
}

contract ERC721 {
  @state
  private HashedMap<PubKeyHash, int> balances;

  @state
  private HashedMap<int, PubKeyHash> tokenOwners;

  @state
  private HashedMap<int, bool> tokenExists;

  @state
  private HashedMap<MapKeyST0, int> allowed;

  @state
  private HashedMap<MapKeyST1, int> ownerTokens;

  @state
  HashedMap<int, bytes> tokenLinks;

  static const bytes tokenName = "My ERC721 Token";

  static const bytes tokenSymbol = "MET";

  static const int totalTokens = 1000000;

  public function name(SigHashPreimage txPreimage, bytes retVal) {
    require(this.tokenName == retVal);
    require(this.propagateState(txPreimage));
  }

  public function symbol(SigHashPreimage txPreimage, bytes retVal) {
    require(this.tokenSymbol == retVal);
    require(this.propagateState(txPreimage));
  }

  public function totalSupply(SigHashPreimage txPreimage, int retVal) {
    require(this.totalTokens == retVal);
    require(this.propagateState(txPreimage));
  }

  public function balanceOf(PubKeyHash _owner, SigHashPreimage txPreimage, int retVal, int this_balances__owner, int this_balances__owner_index) {
    require((!this.balances.has(_owner, this_balances__owner_index) && this_balances__owner == 0) || this.balances.canGet(_owner, this_balances__owner, this_balances__owner_index));
    require(this_balances__owner == retVal);
    require(this.propagateState(txPreimage));
  }

  public function approve(PubKeyHash _to, int _tokenId, SigHashPreimage txPreimage, Sig sig, PubKey pubKey, int this_allowed_msgSender__to, int this_allowed_msgSender__to_index, bool this_tokenExists__tokenId, int this_tokenExists__tokenId_index, PubKeyHash this_tokenOwners__tokenId, int this_tokenOwners__tokenId_index) {
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.allowed.has({msgSender, _to}, this_allowed_msgSender__to_index) && this_allowed_msgSender__to == 0) || this.allowed.canGet({msgSender, _to}, this_allowed_msgSender__to, this_allowed_msgSender__to_index));
    require((!this.tokenExists.has(_tokenId, this_tokenExists__tokenId_index) && this_tokenExists__tokenId == false) || this.tokenExists.canGet(_tokenId, this_tokenExists__tokenId, this_tokenExists__tokenId_index));
    require((!this.tokenOwners.has(_tokenId, this_tokenOwners__tokenId_index) && this_tokenOwners__tokenId == Ripemd160(b'0000000000000000000000000000000000000000')) || this.tokenOwners.canGet(_tokenId, this_tokenOwners__tokenId, this_tokenOwners__tokenId_index));
    require(this_tokenExists__tokenId);
    require(msgSender == this_tokenOwners__tokenId);
    require(msgSender != _to);
    this_allowed_msgSender__to = _tokenId;
    require(this.allowed.set({msgSender, _to}, this_allowed_msgSender__to, this_allowed_msgSender__to_index));
    require(this.propagateState(txPreimage));
  }

  public function takeOwnership(int _tokenId, SigHashPreimage txPreimage, Sig sig, PubKey pubKey, int this_allowed_oldOwner_newOwner, int this_allowed_oldOwner_newOwner_index, int this_balances_oldOwner, int this_balances_oldOwner_index, bool this_tokenExists__tokenId, int this_tokenExists__tokenId_index, PubKeyHash this_tokenOwners__tokenId, int this_tokenOwners__tokenId_index) {
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.allowed.has({oldOwner, newOwner}, this_allowed_oldOwner_newOwner_index) && this_allowed_oldOwner_newOwner == 0) || this.allowed.canGet({oldOwner, newOwner}, this_allowed_oldOwner_newOwner, this_allowed_oldOwner_newOwner_index));
    require((!this.balances.has(oldOwner, this_balances_oldOwner_index) && this_balances_oldOwner == 0) || this.balances.canGet(oldOwner, this_balances_oldOwner, this_balances_oldOwner_index));
    require((!this.tokenExists.has(_tokenId, this_tokenExists__tokenId_index) && this_tokenExists__tokenId == false) || this.tokenExists.canGet(_tokenId, this_tokenExists__tokenId, this_tokenExists__tokenId_index));
    require((!this.tokenOwners.has(_tokenId, this_tokenOwners__tokenId_index) && this_tokenOwners__tokenId == Ripemd160(b'0000000000000000000000000000000000000000')) || this.tokenOwners.canGet(_tokenId, this_tokenOwners__tokenId, this_tokenOwners__tokenId_index));
    require(this_tokenExists__tokenId);
    PubKeyHash oldOwner = this_tokenOwners__tokenId;
    PubKeyHash newOwner = msgSender;
    require(newOwner != oldOwner);
    require(this_allowed_oldOwner_newOwner == _tokenId);
    this_balances_oldOwner -= 1;
    this_tokenOwners__tokenId = newOwner;
    this_balances_oldOwner += 1;
    require(this.balances.set(oldOwner, this_balances_oldOwner, this_balances_oldOwner_index));
    require(this.tokenOwners.set(_tokenId, this_tokenOwners__tokenId, this_tokenOwners__tokenId_index));
    require(this.propagateState(txPreimage));
  }

  public function transfer(PubKeyHash _to, int _tokenId, SigHashPreimage txPreimage, Sig sig, PubKey pubKey, int this_balances_currentOwner, int this_balances_currentOwner_index, int this_balances_newOwner, int this_balances_newOwner_index, int this_ownerTokens_currentOwner_i, int this_ownerTokens_currentOwner_i_index, bool this_tokenExists__tokenId, int this_tokenExists__tokenId_index, PubKeyHash this_tokenOwners__tokenId, int this_tokenOwners__tokenId_index) {
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.balances.has(currentOwner, this_balances_currentOwner_index) && this_balances_currentOwner == 0) || this.balances.canGet(currentOwner, this_balances_currentOwner, this_balances_currentOwner_index));
    require((!this.balances.has(newOwner, this_balances_newOwner_index) && this_balances_newOwner == 0) || this.balances.canGet(newOwner, this_balances_newOwner, this_balances_newOwner_index));
    require((!this.ownerTokens.has({currentOwner, i}, this_ownerTokens_currentOwner_i_index) && this_ownerTokens_currentOwner_i == 0) || this.ownerTokens.canGet({currentOwner, i}, this_ownerTokens_currentOwner_i, this_ownerTokens_currentOwner_i_index));
    require((!this.tokenExists.has(_tokenId, this_tokenExists__tokenId_index) && this_tokenExists__tokenId == false) || this.tokenExists.canGet(_tokenId, this_tokenExists__tokenId, this_tokenExists__tokenId_index));
    require((!this.tokenOwners.has(_tokenId, this_tokenOwners__tokenId_index) && this_tokenOwners__tokenId == Ripemd160(b'0000000000000000000000000000000000000000')) || this.tokenOwners.canGet(_tokenId, this_tokenOwners__tokenId, this_tokenOwners__tokenId_index));
    PubKeyHash currentOwner = msgSender;
    PubKeyHash newOwner = _to;
    require(this_tokenExists__tokenId);
    require(currentOwner == this_tokenOwners__tokenId);
    require(currentOwner != newOwner);
    require(newOwner != Ripemd160(b'0000000000000000000000000000000000000000'));
    int i = 0;
    loop (__LoopCount__0) {
      if (this_ownerTokens_currentOwner_i != _tokenId) {
        this_ownerTokens_currentOwner_i = 0;
        i++;
      }
    }
    this_balances_currentOwner -= 1;
    this_tokenOwners__tokenId = newOwner;
    this_balances_newOwner += 1;
    require(this.balances.set(currentOwner, this_balances_currentOwner, this_balances_currentOwner_index));
    require(this.balances.set(newOwner, this_balances_newOwner, this_balances_newOwner_index));
    require(this.ownerTokens.set({currentOwner, i}, this_ownerTokens_currentOwner_i, this_ownerTokens_currentOwner_i_index));
    require(this.tokenOwners.set(_tokenId, this_tokenOwners__tokenId, this_tokenOwners__tokenId_index));
    require(this.propagateState(txPreimage));
  }

  public function tokenOfOwnerByIndex(PubKeyHash _owner, int _index, SigHashPreimage txPreimage, int _tokenId, int this_ownerTokens__owner__index, int this_ownerTokens__owner__index_index) {
    int tokenId = 0;
    require((!this.ownerTokens.has({_owner, _index}, this_ownerTokens__owner__index_index) && this_ownerTokens__owner__index == 0) || this.ownerTokens.canGet({_owner, _index}, this_ownerTokens__owner__index, this_ownerTokens__owner__index_index));
    require(this_ownerTokens__owner__index == tokenId);
    require(this.propagateState(txPreimage));
  }

  public function tokenMetadata(int _tokenId, SigHashPreimage txPreimage, bytes _infoUrl, bytes this_tokenLinks__tokenId, int this_tokenLinks__tokenId_index) {
    bytes infoUrl = "";
    require((!this.tokenLinks.has(_tokenId, this_tokenLinks__tokenId_index) && this_tokenLinks__tokenId == "") || this.tokenLinks.canGet(_tokenId, this_tokenLinks__tokenId, this_tokenLinks__tokenId_index));
    require(this_tokenLinks__tokenId == infoUrl);
    require(this.propagateState(txPreimage));
  }

  function propagateState(SigHashPreimage txPreimage) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, SigHash.value(txPreimage));
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}