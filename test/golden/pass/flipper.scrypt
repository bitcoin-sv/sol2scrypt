contract flipper {
  @state
  private bool value;

  constructor(bool initvalue) {
    this.value = initvalue;
  }

  public function flip(SigHashPreimage txPreimage) {
    this.value = !this.value;
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function get(bool retVal, SigHashPreimage txPreimage) {
    require(this.value == retVal);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}