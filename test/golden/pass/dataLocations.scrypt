struct MyStruct {
  int foo;
}

contract DataLocations {
  @state
  public int[3] arr;

  @state
  HashedMap<int, PubKeyHash> map;

  @state
  HashedMap<int, MyStruct> myStructs;

  function _f(int[3] _arr, HashedMap<int, PubKeyHash> _map, MyStruct _myStruct) : bool {
    return true;
  }

  public function f(MyStruct myStructs_1, int i0, SigHashPreimage txPreimage) {
    require((!this.myStructs.has(1, i0) && myStructs_1 == {0}) || this.myStructs.canGet(1, myStructs_1, i0));
    this._f(this.arr, this.map, myStructs_1);
    MyStruct myStruct = myStructs_1;
    MyStruct myMemStruct = {0};
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function g(int[3] _arr, int[3] retVal, SigHashPreimage txPreimage) {
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function h(int[3] _arr, SigHashPreimage txPreimage) {
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}