struct MyStruct {
  int foo;
}

contract DataLocations {
  @state
  public int[3] arr;

  @state
  HashedMap<int, PubKeyHash> map;

  @state
  HashedMap<int, MyStruct> myStructs;

  private function _f(int[3] _arr, HashedMap<int, PubKeyHash> _map, MyStruct _myStruct) : bool {
    return true;
  }

  public function f(SigHashPreimage txPreimage, MyStruct this_myStructs_1, int this_myStructs_1_index) {
    require((!this.myStructs.has(1, this_myStructs_1_index) && this_myStructs_1 == {0}) || this.myStructs.canGet(1, this_myStructs_1, this_myStructs_1_index));
    this._f(this.arr, this.map, this_myStructs_1);
    MyStruct myStruct = this_myStructs_1;
    MyStruct myMemStruct = {0};
    require(this.propagateState(txPreimage));
  }

  function g(int[3] _arr) : int[3] {
    return [0, 0, 0];
  }

  public function h(int[3] _arr, SigHashPreimage txPreimage) {
    require(this.propagateState(txPreimage));
  }

  function propagateState(SigHashPreimage txPreimage) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, SigHash.value(txPreimage));
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}