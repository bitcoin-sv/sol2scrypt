struct MapKeyST0 {
  int key0;
  int key1;
}

contract MappingTest {
  @state
  HashedMap<int, int> m1;

  @state
  HashedMap<MapKeyST0, int> m2;

  public function f1(int a, int m1_a, int i0, int m1_b, int i1, SigHashPreimage txPreimage) {
    require((!this.m1.has({a, i0}) && m1_a == 0) || this.m1.canGet({a, i0}, m1_a));
    m1_a = 1;
    m1_a = 2;
    int b = 2;
    m1_a = b;
    require((!this.m1.has({b, i1}) && m1_b == 0) || this.m1.canGet({b, i1}, m1_b));
    m1_b = a;
    require(this.m1.set({a, i0}, m1_a));
    require(this.m1.set({b, i1}, m1_b));
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function f2(int a, int m2_a_a, int i0, int m2_a_b, int i1, int m2_b_a, int i2, SigHashPreimage txPreimage) {
    require((!this.m2.has({{a, a}, i0}) && m2_a_a == 0) || this.m2.canGet({{a, a}, i0}, m2_a_a));
    m2_a_a = 1;
    int b = a;
    require((!this.m2.has({{a, b}, i1}) && m2_a_b == 0) || this.m2.canGet({{a, b}, i1}, m2_a_b));
    m2_a_b = a + 1;
    require((!this.m2.has({{b, a}, i2}) && m2_b_a == 0) || this.m2.canGet({{b, a}, i2}, m2_b_a));
    m2_b_a = b + 1;
    require(this.m2.set({{a, a}, i0}, m2_a_a));
    require(this.m2.set({{a, b}, i1}, m2_a_b));
    require(this.m2.set({{b, a}, i2}, m2_b_a));
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}