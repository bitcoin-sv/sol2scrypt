struct MapKeyST0 {
  int key0;
  int key1;
}

contract MappingTest {
  @state
  HashedMap<int, int> m1;

  @state
  HashedMap<MapKeyST0, int> m2;

  public function f1(int a, SigHashPreimage txPreimage, int this_m1_a, int this_m1_a_index, int this_m1_b, int this_m1_b_index) {
    require((!this.m1.has(a, this_m1_a_index) && this_m1_a == 0) || this.m1.canGet(a, this_m1_a, this_m1_a_index));
    this_m1_a = 1;
    this_m1_a = 2;
    int b = 2;
    this_m1_a = b;
    require((!this.m1.has(b, this_m1_b_index) && this_m1_b == 0) || this.m1.canGet(b, this_m1_b, this_m1_b_index));
    this_m1_b = a;
    require(this.m1.set(a, this_m1_a, this_m1_a_index));
    require(this.m1.set(b, this_m1_b, this_m1_b_index));
    require(this.propagateState(txPreimage));
  }

  public function f2(int a, SigHashPreimage txPreimage, int this_m2_a_a, int this_m2_a_a_index, int this_m2_a_b, int this_m2_a_b_index, int this_m2_b_a, int this_m2_b_a_index) {
    require((!this.m2.has({a, a}, this_m2_a_a_index) && this_m2_a_a == 0) || this.m2.canGet({a, a}, this_m2_a_a, this_m2_a_a_index));
    this_m2_a_a = 1;
    int b = a;
    require((!this.m2.has({a, b}, this_m2_a_b_index) && this_m2_a_b == 0) || this.m2.canGet({a, b}, this_m2_a_b, this_m2_a_b_index));
    this_m2_a_b = a + 1;
    require((!this.m2.has({b, a}, this_m2_b_a_index) && this_m2_b_a == 0) || this.m2.canGet({b, a}, this_m2_b_a, this_m2_b_a_index));
    this_m2_b_a = b + 1;
    require(this.m2.set({a, a}, this_m2_a_a, this_m2_a_a_index));
    require(this.m2.set({a, b}, this_m2_a_b, this_m2_a_b_index));
    require(this.m2.set({b, a}, this_m2_b_a, this_m2_b_a_index));
    require(this.propagateState(txPreimage));
  }

  function propagateState(SigHashPreimage txPreimage) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, SigHash.value(txPreimage));
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}