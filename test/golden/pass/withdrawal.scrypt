contract WithdrawalContract {
  @state
  public PubKeyHash richest;

  @state
  public int mostSent;

  @state
  HashedMap<PubKeyHash, int> pendingWithdrawals;

  const int initBalance;

  constructor(int msgValue, PubKeyHash msgSender) {
    this.richest = msgSender;
    this.mostSent = msgValue;
    this.initBalance = msgValue;
  }

  public function becomeRichest(SigHashPreimage txPreimage, int msgValue, Sig sig, PubKey pubKey, int this_pendingWithdrawals_this_richest, int this_pendingWithdrawals_this_richest_index) {
    require(this.checkInitBalance(txPreimage));
    int contractBalance = SigHash.value(txPreimage) + msgValue;
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require(msgValue >= 0);
    if (msgValue <= this.mostSent)
      require(false);
    require((!this.pendingWithdrawals.has(this.richest, this_pendingWithdrawals_this_richest_index) && this_pendingWithdrawals_this_richest == 0) || this.pendingWithdrawals.canGet(this.richest, this_pendingWithdrawals_this_richest, this_pendingWithdrawals_this_richest_index));
    this_pendingWithdrawals_this_richest += msgValue;
    this.richest = msgSender;
    this.mostSent = msgValue;
    require(this.pendingWithdrawals.set(this.richest, this_pendingWithdrawals_this_richest, this_pendingWithdrawals_this_richest_index));
    require(this.propagateState(txPreimage, contractBalance));
  }

  public function withdraw(SigHashPreimage txPreimage, Sig sig, PubKey pubKey, int this_pendingWithdrawals_msgSender, int this_pendingWithdrawals_msgSender_index) {
    require(this.checkInitBalance(txPreimage));
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.pendingWithdrawals.has(msgSender, this_pendingWithdrawals_msgSender_index) && this_pendingWithdrawals_msgSender == 0) || this.pendingWithdrawals.canGet(msgSender, this_pendingWithdrawals_msgSender, this_pendingWithdrawals_msgSender_index));
    int amount = this_pendingWithdrawals_msgSender;
    this_pendingWithdrawals_msgSender = 0;
    require(this.pendingWithdrawals.set(msgSender, this_pendingWithdrawals_msgSender, this_pendingWithdrawals_msgSender_index));
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }

  function checkInitBalance(SigHashPreimage txPreimage) : bool {
    return !Tx.isFirstCall(txPreimage) || SigHash.value(txPreimage) == this.initBalance;
  }
}