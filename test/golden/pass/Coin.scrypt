contract Coin {
  @state
  public PubKeyHash minter;

  @state
  public HashedMap<PubKeyHash, int> balances;

  @state
  public HashedMap<PubKeyHash, bool> b1;

  @state
  public HashedMap<PubKeyHash, bytes> b2;

  constructor(PubKeyHash msgSender) {
    this.minter = msgSender;
  }

  public function mint(PubKeyHash receiver, int amount, Sig sig, PubKey pubKey, bool b1_receiver, int i1, bytes b2_receiver, int i2, int balances_receiver, int i0, SigHashPreimage txPreimage) {
    bool ret = false;
    bool returned = false;
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    if (msgSender != this.minter) {
      {
        ret = true;
        returned = true;
      }
    }
    if (!returned) {
      require((!this.balances.has({receiver, i0}) && balances_receiver == 0) || this.balances.canGet({receiver, i0}, balances_receiver));
      balances_receiver += amount;
      require((!this.b1.has({receiver, i1}) && b1_receiver == false) || this.b1.canGet({receiver, i1}, b1_receiver));
      b1_receiver != true;
      require((!this.b2.has({receiver, i2}) && b2_receiver == b'') || this.b2.canGet({receiver, i2}, b2_receiver));
      b2_receiver = b'0001';
    }
    require(this.b2.set({receiver, i2}, b2_receiver));
    require(this.balances.set({receiver, i0}, balances_receiver));
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function send(PubKeyHash receiver, int amount, bool a, bytes b, Sig sig, PubKey pubKey, bool b1_receiver, int i2, bytes b2_receiver, int i3, int balances_msgSender, int i0, int balances_receiver, int i1, SigHashPreimage txPreimage) {
    bool ret = false;
    bool returned = false;
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.balances.has({msgSender, i0}) && balances_msgSender == 0) || this.balances.canGet({msgSender, i0}, balances_msgSender));
    if (balances_msgSender < amount) {
      {
        ret = true;
        returned = true;
      }
    }
    if (!returned) {
      balances_msgSender -= amount;
      require((!this.balances.has({receiver, i1}) && balances_receiver == 0) || this.balances.canGet({receiver, i1}, balances_receiver));
      balances_receiver += amount;
      require((!this.b1.has({receiver, i2}) && b1_receiver == false) || this.b1.canGet({receiver, i2}, b1_receiver));
      b1_receiver != a;
      require((!this.b2.has({receiver, i3}) && b2_receiver == b'') || this.b2.canGet({receiver, i3}, b2_receiver));
      b2_receiver = b;
    }
    require(this.b2.set({receiver, i3}, b2_receiver));
    require(this.balances.set({msgSender, i0}, balances_msgSender));
    require(this.balances.set({receiver, i1}, balances_receiver));
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}