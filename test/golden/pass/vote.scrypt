struct Voter {
  int weight;
  bool voted;
  PubKeyHash delegate;
  int vote;
}

struct Proposal {
  bytes name;
  int voteCount;
}

contract Ballot {
  @state
  public PubKeyHash chairperson;

  @state
  public HashedMap<PubKeyHash, Voter> voters;

  @state
  public Proposal[10] proposals;

  constructor(bytes[10] proposalNames, PubKeyHash msgSender) {
    this.chairperson = msgSender;
    require((!this.voters.has({this.chairperson, i0}) && voters_chairperson == {0, false, Ripemd160(b'0000000000000000000000000000000000000000'), 0}) || this.voters.canGet({this.chairperson, i0}, voters_chairperson));
    voters_chairperson.weight = 1;
    int i = 0;
    loop (__LoopCount__0) {
      if (i < proposalNames.length) {
        this.proposals.push({proposalNames[i], 0});
        i++;
      }
    }
  }

  public function giveRightToVote(PubKeyHash voter, Sig sig, PubKey pubKey, Voter voters_voter, int i0, SigHashPreimage txPreimage) {
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require(msgSender == this.chairperson);
    require((!this.voters.has({voter, i0}) && voters_voter == {0, false, Ripemd160(b'0000000000000000000000000000000000000000'), 0}) || this.voters.canGet({voter, i0}, voters_voter));
    require(!voters_voter.voted);
    require(voters_voter.weight == 0);
    voters_voter.weight = 1;
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function delegate(PubKeyHash to, Sig sig, PubKey pubKey, Voter voters_msgSender, int i0, Voter voters_to, int i1, SigHashPreimage txPreimage) {
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.voters.has({msgSender, i0}) && voters_msgSender == {0, false, Ripemd160(b'0000000000000000000000000000000000000000'), 0}) || this.voters.canGet({msgSender, i0}, voters_msgSender));
    Voter sender = voters_msgSender;
    require(!sender.voted);
    require(to != msgSender);
    loop (__LoopCount__0) {
      if (voters_to.delegate != Ripemd160(b'0000000000000000000000000000000000000000')) {
        to = voters_to.delegate;
        require(to != msgSender);
      }
    }
    Voter delegate_ = voters_to;
    require(delegate_.weight >= 1);
    sender.voted = true;
    sender.delegate = to;
    if (delegate_.voted) {
      this.proposals[delegate_.vote].voteCount += sender.weight;
    }
    else {
      delegate_.weight += sender.weight;
    }
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function vote(int proposal, Sig sig, PubKey pubKey, Voter voters_msgSender, int i0, SigHashPreimage txPreimage) {
    PubKeyHash msgSender = hash160(pubKey);
    require(checkSig(sig, pubKey));
    require((!this.voters.has({msgSender, i0}) && voters_msgSender == {0, false, Ripemd160(b'0000000000000000000000000000000000000000'), 0}) || this.voters.canGet({msgSender, i0}, voters_msgSender));
    Voter sender = voters_msgSender;
    require(sender.weight != 0);
    require(!sender.voted);
    sender.voted = true;
    sender.vote = proposal;
    this.proposals[proposal].voteCount += sender.weight;
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function winningProposal(int _winningProposal_, SigHashPreimage txPreimage) {
    int winningProposal_ = 0;
    int winningVoteCount = 0;
    int p = 0;
    loop (__LoopCount__0) {
      if (p < this.proposals.length) {
        if (this.proposals[p].voteCount > winningVoteCount) {
          winningVoteCount = this.proposals[p].voteCount;
          winningProposal_ = p;
        }
        p++;
      }
    }
    require(winningProposal_ == _winningProposal_);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  public function winnerName(bytes _winnerName_, SigHashPreimage txPreimage) {
    bytes winnerName_ = b'';
    winnerName_ = this.proposals[this.winningProposal()].name;
    require(winnerName_ == _winnerName_);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}