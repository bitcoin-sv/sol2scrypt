contract SolidityTest {
  @state
  int a;

  function arithmetic() : bool {
    int a = 20;
    int b = 10;
    int sum = a + b;
    sum += a;
    int diff = a - b;
    sum -= a;
    int mul = a * b;
    sum *= a;
    int div = a / b;
    sum /= a;
    int mod = a % b;
    sum %= a;
    int dec = --b;
    b--;
    int inc = ++a;
    a++;
    this.f1(a) >> 3;
    a << 3;
    a << this.f1(1);
    a >>= 3;
    a <<= 3;
    bool eq = a == b;
    bool noteq = a != b;
    bool gtr = a > b;
    bool les = a < b;
    bool gtreq = a >= b;
    bool leseq = a <= b;
    return true;
  }

  function shift() : bool {
    int a = 20;
    int b = 10;
    a << b;
    b >> b;
    int c = a <<= a <<= 1;
    c = a * 1 >> b - 1 << c + 1;
    a <<= a + 1;
    int d = a <<= (a + 1) * 1 + (b - 1);
    int[3] aa = [0, 0, 0];
    aa[a >> 1] = aa[a <<= 1 + 1];
    aa[a >>= 1] = aa[a >> 1 + 1];
    this.f1(a >> 3) * (a >>= 1) << 3 >> (a + 1);
    return true;
  }

  function ternary(int a, int b) : bool {
    int result = (a > b ? a : b);
    return true;
  }

  function logical(bool a, bool b) : bool {
    bool and = a && b;
    bool or = a || b;
    bool not = !a;
    return true;
  }

  function bitwise(bytes a, bytes b) : bool {
    bytes and = a & b;
    and &= a;
    and & b'01';
    bytes or = a | b;
    or |= a;
    or | b'01';
    bytes xor = a ^ b;
    xor ^= a;
    xor ^ b'01';
    bytes leftshift = a << 1;
    bytes rightshift = a >> 1;
    rightshift >>= 1;
    leftshift <<= 1;
    bytes not = ~a;
    int x = 0;
    int y = 0;
    x &= x & y | x ^ x;
    y ^= ~x & y & x ^ x;
    y |= ~x & y & x | this.f2(x);
    int[3] aa = [0, 0, 0];
    aa[~x & y & x | this.f2(x)] = 3;
    aa[~x ^ this.f2(x) & x | this.f2(x)] = 3;
    return true;
  }

  public function unlock(int ab, SigHashPreimage txPreimage) {
    require(this.a == ab);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function f1(int x) : int {
    return x + 1;
  }

  function f2(int x) : int {
    return x + 1;
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}