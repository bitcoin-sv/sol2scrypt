contract Return {
  @state
  int counter;

  function test(int x) : int {
    int ret = 0;
    bool returned = false;
    if (x > 0) {
      {
        ret = -1;
        returned = true;
      }
    }
    if (!returned) {
      this.counter++;
    }
    return returned ? ret : 1;
  }

  public function unlock(int ab, SigHashPreimage txPreimage, int retVal) {
    int ret = 0;
    bool returned = false;
    if (ab > 0) {
      {
        ret = ab;
        returned = true;
      }
    }
    if (!returned) {
      this.counter++;
    }
    require((returned ? ret : this.counter) == retVal);
    require(this.propagateState(txPreimage, SigHash.value(txPreimage)));
  }

  function propagateState(SigHashPreimage txPreimage, int value) : bool {
    require(Tx.checkPreimage(txPreimage));
    bytes outputScript = this.getStateScript();
    bytes output = Utils.buildOutput(outputScript, value);
    return hash256(output) == SigHash.hashOutputs(txPreimage);
  }
}